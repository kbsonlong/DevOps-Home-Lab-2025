---
# ArgoCD Ingress for GitOps management
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: argocd-ingress
  namespace: argocd
  annotations:
    # Disable SSL redirect for tunnel access to prevent redirect loops
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
    # ArgoCD server configuration for UI access
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    # Handle forwarded headers properly for tunnel access
    nginx.ingress.kubernetes.io/use-forwarded-headers: "true"
    nginx.ingress.kubernetes.io/forwarded-for-header: "X-Forwarded-For"
    nginx.ingress.kubernetes.io/forwarded-proto-header: "X-Forwarded-Proto"
    nginx.ingress.kubernetes.io/forwarded-host-header: "X-Forwarded-Host"
    # ArgoCD specific proxy settings
    nginx.ingress.kubernetes.io/proxy-body-size: "1m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    # Proxy headers for ArgoCD
    nginx.ingress.kubernetes.io/proxy-set-headers: "argocd-proxy-headers"
    # # cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  ingressClassName: nginx
  # tls:
  # - hosts:
  #   - argocd.kbsonlong.com  # Production ArgoCD with SSL
  #   secretName: argocd-prod-tls
  rules:
    - host: argocd.kbsonlong.com  # Local ArgoCD access (no SSL)
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: argocd-server
                port:
                  number: 80
    
    # Production ArgoCD access
    - host: argocd.kbsonlong.com  # Production ArgoCD access (with SSL)
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: argocd-server
                port:
                  number: 80

